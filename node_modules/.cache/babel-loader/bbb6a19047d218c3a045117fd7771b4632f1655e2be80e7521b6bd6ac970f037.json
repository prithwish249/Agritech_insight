{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prithhish\\\\Desktop\\\\agritech\\\\src\\\\components\\\\DiseasePrediction.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiseasePrediction = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [diseaseResult, setDiseaseResult] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const apiKey = \"YOUR_API_KEY\"; // Replace with your Clarifai API key\n\n  const handleFileInputChange = e => {\n    const file = e.target.files[0];\n    setSelectedFile(file);\n  };\n  const handlePrediction = async () => {\n    if (!selectedFile) {\n      alert(\"Please select an image first.\");\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append(\"image\", selectedFile);\n      const response = await fetch(\"https://your-api-url.com/predict-disease\", {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to predict disease.\");\n      }\n      const data = await response.json();\n      if (data && data.outputs && data.outputs.length > 0) {\n        const concepts = data.outputs[0].data.concepts;\n        if (concepts && concepts.length > 0) {\n          const topPrediction = concepts[0];\n          setDiseaseResult(`Disease: ${topPrediction.name} (Confidence: ${topPrediction.value.toFixed(2)})`);\n        }\n      } else {\n        setDiseaseResult(\"No prediction result.\");\n      }\n    } catch (error) {\n      console.error(\"Error predicting disease:\", error);\n      setDiseaseResult(\"Failed to predict disease.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-blue-200 h-[500] flex items-center justify-center \",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 border-2 border-green-500 rounded-lg shadow-lg w-[80%] max-w-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"lg:text-2xl md:text-2xl sm:text-xl xl:text-2xl font-semibold mb-4 text-center\",\n        children: \"Plant Disease Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".jpg\",\n        onChange: handleFileInputChange,\n        className: \"w-full xl:pl-[100px] lg:pl-[100px] md:pl-[70px] sm:pl-[70px] min-pl-[60px] mb-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 border border-black hover:bg-blue-600 text-white p-3 rounded-lg w-full\",\n        onClick: handlePrediction,\n        disabled: isLoading,\n        children: isLoading ? \"Predicting...\" : \"Predict Disease\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), diseaseResult && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4 text-center\",\n        children: diseaseResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(DiseasePrediction, \"byftvpwq8L12QLIGjl//cgIHvyw=\");\n_c = DiseasePrediction;\nexport default DiseasePrediction;\nvar _c;\n$RefreshReg$(_c, \"DiseasePrediction\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DiseasePrediction","_s","selectedFile","setSelectedFile","diseaseResult","setDiseaseResult","isLoading","setIsLoading","apiKey","handleFileInputChange","e","file","target","files","handlePrediction","alert","formData","FormData","append","response","fetch","method","headers","Authorization","body","ok","Error","data","json","outputs","length","concepts","topPrediction","name","value","toFixed","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Prithhish/Desktop/agritech/src/components/DiseasePrediction.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst DiseasePrediction = () => {\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [diseaseResult, setDiseaseResult] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const apiKey = \"YOUR_API_KEY\"; // Replace with your Clarifai API key\r\n\r\n  const handleFileInputChange = (e) => {\r\n    const file = e.target.files[0];\r\n    setSelectedFile(file);\r\n  };\r\n\r\n  const handlePrediction = async () => {\r\n    if (!selectedFile) {\r\n      alert(\"Please select an image first.\");\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"image\", selectedFile);\r\n\r\n      const response = await fetch(\"https://your-api-url.com/predict-disease\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to predict disease.\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data && data.outputs && data.outputs.length > 0) {\r\n        const concepts = data.outputs[0].data.concepts;\r\n        if (concepts && concepts.length > 0) {\r\n          const topPrediction = concepts[0];\r\n          setDiseaseResult(\r\n            `Disease: ${\r\n              topPrediction.name\r\n            } (Confidence: ${topPrediction.value.toFixed(2)})`\r\n          );\r\n        }\r\n      } else {\r\n        setDiseaseResult(\"No prediction result.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error predicting disease:\", error);\r\n      setDiseaseResult(\"Failed to predict disease.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-blue-200 h-[500] flex items-center justify-center \">\r\n      <div className=\"bg-white p-6 border-2 border-green-500 rounded-lg shadow-lg w-[80%] max-w-md\">\r\n        <h2 className=\"lg:text-2xl md:text-2xl sm:text-xl xl:text-2xl font-semibold mb-4 text-center\">\r\n          Plant Disease Prediction\r\n        </h2>\r\n        <input\r\n          type=\"file\"\r\n          accept=\".jpg\"\r\n          onChange={handleFileInputChange}\r\n          className=\"w-full xl:pl-[100px] lg:pl-[100px] md:pl-[70px] sm:pl-[70px] min-pl-[60px] mb-4\"\r\n        />\r\n        <button\r\n          className=\"bg-blue-500 border border-black hover:bg-blue-600 text-white p-3 rounded-lg w-full\"\r\n          onClick={handlePrediction}\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading ? \"Predicting...\" : \"Predict Disease\"}\r\n        </button>\r\n        {diseaseResult && <p className=\"mt-4 text-center\">{diseaseResult}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiseasePrediction;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}