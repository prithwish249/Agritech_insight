{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prithhish\\\\Desktop\\\\agritech\\\\src\\\\components\\\\CropPrediction.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CropPrediction = () => {\n  _s();\n  const [ph, setPh] = useState('');\n  const [nitrogen, setNitrogen] = useState('');\n  const [phosphorus, setPhosphorus] = useState('');\n  const [potassium, setPotassium] = useState('');\n  const [hydration, setHydration] = useState('');\n  const [rainfall, setRainfall] = useState(''); // New input state for rainfall\n  const [temperature, setTemperature] = useState(''); // New input state for temperature\n  const [cropResult, setCropResult] = useState('');\n\n  // Define colors for crop predictions\n  const cropColors = {\n    Wheat: 'green' // Example color for Wheat\n    // Add more colors for other crop predictions as needed\n  };\n\n  const handleSubmit = () => {\n    // You can implement your crop prediction logic here.\n    // For the sake of this example, we'll simply set a result.\n    const result = 'Wheat';\n    setCropResult(result);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-semibold text-center mb-4\",\n      children: \"Crop Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-blue-100 p-6 rounded-lg shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-span-2 sm:col-span-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-gray-700 font-bold mb-2\",\n            htmlFor: \"temperature\",\n            children: \"Temperature (\\xB0C):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"temperature\",\n            placeholder: \"Enter Temperature in \\xB0C\",\n            className: \"w-full bg-white rounded-lg p-2 outline-none\",\n            value: temperature,\n            onChange: e => setTemperature(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-span-2\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-lg w-64 mx-auto block\",\n            onClick: handleSubmit,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), cropResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `text-center text-xl font-semibold text-${cropColors[cropResult]}-700`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `bg-${cropColors[cropResult]}-100 inline-block p-2 rounded-lg`,\n            style: {\n              display: 'inline-block'\n            },\n            children: cropResult\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(CropPrediction, \"lH8Ns3y/Cm4TqnjBfdzUHQpzWOg=\");\n_c = CropPrediction;\nexport default CropPrediction;\nvar _c;\n$RefreshReg$(_c, \"CropPrediction\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CropPrediction","_s","ph","setPh","nitrogen","setNitrogen","phosphorus","setPhosphorus","potassium","setPotassium","hydration","setHydration","rainfall","setRainfall","temperature","setTemperature","cropResult","setCropResult","cropColors","Wheat","handleSubmit","result","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","placeholder","value","onChange","e","target","onClick","style","display","_c","$RefreshReg$"],"sources":["C:/Users/Prithhish/Desktop/agritech/src/components/CropPrediction.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst CropPrediction = () => {\r\n  const [ph, setPh] = useState('');\r\n  const [nitrogen, setNitrogen] = useState('');\r\n  const [phosphorus, setPhosphorus] = useState('');\r\n  const [potassium, setPotassium] = useState('');\r\n  const [hydration, setHydration] = useState('');\r\n  const [rainfall, setRainfall] = useState(''); // New input state for rainfall\r\n  const [temperature, setTemperature] = useState(''); // New input state for temperature\r\n  const [cropResult, setCropResult] = useState('');\r\n\r\n  // Define colors for crop predictions\r\n  const cropColors = {\r\n    Wheat: 'green', // Example color for Wheat\r\n    // Add more colors for other crop predictions as needed\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    // You can implement your crop prediction logic here.\r\n    // For the sake of this example, we'll simply set a result.\r\n    const result = 'Wheat';\r\n\r\n    setCropResult(result);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4\">\r\n      <h1 className=\"text-3xl font-semibold text-center mb-4\">Crop Prediction</h1>\r\n      <div className=\"bg-blue-100 p-6 rounded-lg shadow-lg\">\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          {/* ... (previous input fields remain the same) */}\r\n          {/* New input field for temperature */}\r\n          <div className=\"col-span-2 sm:col-span-1\">\r\n            <label className=\"block text-gray-700 font-bold mb-2\" htmlFor=\"temperature\">Temperature (°C):</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"temperature\"\r\n              placeholder=\"Enter Temperature in °C\"\r\n              className=\"w-full bg-white rounded-lg p-2 outline-none\"\r\n              value={temperature}\r\n              onChange={(e) => setTemperature(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"col-span-2\">\r\n            <button\r\n              className=\"bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-lg w-64 mx-auto block\"\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {cropResult && (\r\n          <div className=\"mt-4\">\r\n            {/* Display the crop prediction with a colored box */}\r\n            <div className={`text-center text-xl font-semibold text-${cropColors[cropResult]}-700`}>\r\n              <div\r\n                className={`bg-${cropColors[cropResult]}-100 inline-block p-2 rounded-lg`}\r\n                style={{ display: 'inline-block' }}\r\n              >\r\n                {cropResult}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CropPrediction;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}