{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prithhish\\\\Desktop\\\\agritech\\\\frontend\\\\src\\\\components\\\\Routes.js\",\n  _s = $RefreshSig$();\n// src/components/Routes.js\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Routes, Navigate } from \"react-router-dom\";\nimport Navbar from \"./Navbar\";\nimport Home from \"./Home\";\nimport Weather from \"./Weather\";\nimport CropPrediction from \"./CropPrediction\";\nimport FertilizerPrediction from \"./FertilizerPrediction\";\nimport DiseasePrediction from \"./DiseasePrediction\";\nimport Login from \"./Login\";\n\n// Mock authentication status for demonstration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isAuthenticated = () => {\n  // Logic to check if the user is authenticated\n  // You might use state, context, or localStorage to store authentication status\n  return localStorage.getItem(\"authToken\") !== null; // Example: Check if auth token exists\n};\n\nconst ProtectedRoute = ({\n  element,\n  path\n}) => {\n  _s();\n  // State to hold authentication status\n  const [authenticated, setAuthenticated] = useState(isAuthenticated());\n\n  // Effect to update authentication status\n  useEffect(() => {\n    const checkAuthentication = () => {\n      setAuthenticated(isAuthenticated());\n    };\n    checkAuthentication();\n    // Subscribe to authentication changes if using context or state for authentication\n    // Cleanup the subscription to prevent memory leaks\n    return () => {\n      // Cleanup logic if needed\n    };\n  }, []);\n\n  // Render the element if authenticated, otherwise redirect to login\n  return authenticated ? element : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 36\n  }, this);\n};\n_s(ProtectedRoute, \"xny1WAQ4biI724UwL4am+Oyx/6s=\");\n_c = ProtectedRoute;\nconst AppRoutes = () => {\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        path: \"/weather\",\n        element: /*#__PURE__*/_jsxDEV(Weather, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        path: \"/crop-prediction\",\n        element: /*#__PURE__*/_jsxDEV(CropPrediction, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 58\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        path: \"/fertilizer-prediction\",\n        element: /*#__PURE__*/_jsxDEV(FertilizerPrediction, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 64\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        path: \"/disease-prediction\",\n        element: /*#__PURE__*/_jsxDEV(DiseasePrediction, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 61\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_c2 = AppRoutes;\nexport default AppRoutes;\nvar _c, _c2;\n$RefreshReg$(_c, \"ProtectedRoute\");\n$RefreshReg$(_c2, \"AppRoutes\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Route","Routes","Navigate","Navbar","Home","Weather","CropPrediction","FertilizerPrediction","DiseasePrediction","Login","jsxDEV","_jsxDEV","isAuthenticated","localStorage","getItem","ProtectedRoute","element","path","_s","authenticated","setAuthenticated","checkAuthentication","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","AppRoutes","children","_c2","$RefreshReg$"],"sources":["C:/Users/Prithhish/Desktop/agritech/frontend/src/components/Routes.js"],"sourcesContent":["// src/components/Routes.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter, Route, Routes, Navigate } from \"react-router-dom\";\r\nimport Navbar from \"./Navbar\";\r\nimport Home from \"./Home\";\r\nimport Weather from \"./Weather\";\r\nimport CropPrediction from \"./CropPrediction\";\r\nimport FertilizerPrediction from \"./FertilizerPrediction\";\r\nimport DiseasePrediction from \"./DiseasePrediction\";\r\nimport Login from \"./Login\";\r\n\r\n// Mock authentication status for demonstration\r\nconst isAuthenticated = () => {\r\n  // Logic to check if the user is authenticated\r\n  // You might use state, context, or localStorage to store authentication status\r\n  return localStorage.getItem(\"authToken\") !== null; // Example: Check if auth token exists\r\n};\r\n\r\nconst ProtectedRoute = ({ element, path }) => {\r\n  // State to hold authentication status\r\n  const [authenticated, setAuthenticated] = useState(isAuthenticated());\r\n\r\n  // Effect to update authentication status\r\n  useEffect(() => {\r\n    const checkAuthentication = () => {\r\n      setAuthenticated(isAuthenticated());\r\n    };\r\n\r\n    checkAuthentication();\r\n    // Subscribe to authentication changes if using context or state for authentication\r\n    // Cleanup the subscription to prevent memory leaks\r\n    return () => {\r\n      // Cleanup logic if needed\r\n    };\r\n  }, []);\r\n\r\n  // Render the element if authenticated, otherwise redirect to login\r\n  return authenticated ? element : <Navigate to=\"/login\" />;\r\n};\r\n\r\nconst AppRoutes = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Navbar />\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"/login\" element={<Login />} />\r\n        {/* Wrap protected routes with ProtectedRoute */}\r\n        <ProtectedRoute path=\"/weather\" element={<Weather />} />\r\n        <ProtectedRoute path=\"/crop-prediction\" element={<CropPrediction />} />\r\n        <ProtectedRoute path=\"/fertilizer-prediction\" element={<FertilizerPrediction />} />\r\n        <ProtectedRoute path=\"/disease-prediction\" element={<DiseasePrediction />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default AppRoutes;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}