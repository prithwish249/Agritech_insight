{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prithhish\\\\Desktop\\\\agritech\\\\src\\\\components\\\\DiseasePrediction.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiseasePrediction = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [diseaseResult, setDiseaseResult] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const apiKey = 'YOUR_CLARIFAI_API_KEY'; // Replace with your Clarifai API key\n\n  const handleFileInputChange = e => {\n    const file = e.target.files[0];\n    setSelectedFile(file);\n  };\n  const handlePrediction = async () => {\n    if (!selectedFile) {\n      alert('Please select an image first.');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', selectedFile);\n      const response = await fetch('https://api.clarifai.com/v2/models/plantdisease-oct2021/outputs', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Failed to predict disease.');\n      }\n      const data = await response.json();\n      if (data && data.outputs && data.outputs.length > 0) {\n        const concepts = data.outputs[0].data.concepts;\n        if (concepts && concepts.length > 0) {\n          const topPrediction = concepts[0];\n          setDiseaseResult(`Disease: ${topPrediction.name} (Confidence: ${topPrediction.value.toFixed(2)})`);\n        }\n      } else {\n        setDiseaseResult('No prediction result.');\n      }\n    } catch (error) {\n      console.error('Error predicting disease:', error);\n      setDiseaseResult('Failed to predict disease.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#f0f0f0',\n      padding: '40px',\n      borderRadius: '10px',\n      boxShadow: '0 0 10px rgba(0, 0, 0, 0.2)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginBottom: '10px',\n        color: '#333'\n      },\n      children: \"Plant Disease Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".jpg\",\n      onChange: handleFileInputChange,\n      style: {\n        marginBottom: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePrediction,\n      disabled: isLoading,\n      style: {\n        backgroundColor: '#007bff',\n        color: '#fff',\n        padding: '10px 20px',\n        borderRadius: '5px',\n        border: 'none',\n        cursor: 'pointer'\n      },\n      children: \"Predict Disease\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Predicting...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }, this), diseaseResult && !isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: diseaseResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(DiseasePrediction, \"vEQUv7BEkRCrG7xa2afx9gaI+C0=\");\n_c = DiseasePrediction;\nexport default DiseasePrediction;\nvar _c;\n$RefreshReg$(_c, \"DiseasePrediction\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DiseasePrediction","_s","selectedFile","setSelectedFile","diseaseResult","setDiseaseResult","isLoading","setIsLoading","apiKey","handleFileInputChange","e","file","target","files","handlePrediction","alert","formData","FormData","append","response","fetch","method","headers","body","ok","Error","data","json","outputs","length","concepts","topPrediction","name","value","toFixed","error","console","style","backgroundColor","padding","borderRadius","boxShadow","children","marginBottom","color","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","disabled","border","cursor","_c","$RefreshReg$"],"sources":["C:/Users/Prithhish/Desktop/agritech/src/components/DiseasePrediction.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst DiseasePrediction = () => {\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [diseaseResult, setDiseaseResult] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const apiKey = 'YOUR_CLARIFAI_API_KEY'; // Replace with your Clarifai API key\r\n\r\n  const handleFileInputChange = (e) => {\r\n    const file = e.target.files[0];\r\n    setSelectedFile(file);\r\n  };\r\n\r\n  const handlePrediction = async () => {\r\n    if (!selectedFile) {\r\n      alert('Please select an image first.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('image', selectedFile);\r\n\r\n      const response = await fetch('https://api.clarifai.com/v2/models/plantdisease-oct2021/outputs', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${apiKey}`,\r\n        },\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to predict disease.');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data && data.outputs && data.outputs.length > 0) {\r\n        const concepts = data.outputs[0].data.concepts;\r\n        if (concepts && concepts.length > 0) {\r\n          const topPrediction = concepts[0];\r\n          setDiseaseResult(`Disease: ${topPrediction.name} (Confidence: ${topPrediction.value.toFixed(2)})`);\r\n        }\r\n      } else {\r\n        setDiseaseResult('No prediction result.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error predicting disease:', error);\r\n      setDiseaseResult('Failed to predict disease.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ backgroundColor: '#f0f0f0', padding: '40px', borderRadius: '10px', boxShadow: '0 0 10px rgba(0, 0, 0, 0.2)' }}>\r\n      <h2 style={{ marginBottom: '10px', color: '#333' }}>Plant Disease Prediction</h2>\r\n      <input type=\"file\" accept=\".jpg\" onChange={handleFileInputChange} style={{ marginBottom: '10px' }} />\r\n      <button onClick={handlePrediction} disabled={isLoading} style={{ backgroundColor: '#007bff', color: '#fff', padding: '10px 20px', borderRadius: '5px', border: 'none', cursor: 'pointer' }}>\r\n        Predict Disease\r\n      </button>\r\n      {isLoading && <p>Predicting...</p>}\r\n      {diseaseResult && !isLoading && <p>{diseaseResult}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiseasePrediction;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMW,MAAM,GAAG,uBAAuB,CAAC,CAAC;;EAExC,MAAMC,qBAAqB,GAAIC,CAAC,IAAK;IACnC,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9BV,eAAe,CAACQ,IAAI,CAAC;EACvB,CAAC;EAED,MAAMG,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAACZ,YAAY,EAAE;MACjBa,KAAK,CAAC,+BAA+B,CAAC;MACtC;IACF;IAEAR,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF,MAAMS,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEhB,YAAY,CAAC;MAEtC,MAAMiB,QAAQ,GAAG,MAAMC,KAAK,CAAC,iEAAiE,EAAE;QAC9FC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,eAAe,EAAG,UAASd,MAAO;QACpC,CAAC;QACDe,IAAI,EAAEP;MACR,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,IAAIA,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;QACnD,MAAMC,QAAQ,GAAGJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI,CAACI,QAAQ;QAC9C,IAAIA,QAAQ,IAAIA,QAAQ,CAACD,MAAM,GAAG,CAAC,EAAE;UACnC,MAAME,aAAa,GAAGD,QAAQ,CAAC,CAAC,CAAC;UACjCzB,gBAAgB,CAAE,YAAW0B,aAAa,CAACC,IAAK,iBAAgBD,aAAa,CAACE,KAAK,CAACC,OAAO,CAAC,CAAC,CAAE,GAAE,CAAC;QACpG;MACF,CAAC,MAAM;QACL7B,gBAAgB,CAAC,uBAAuB,CAAC;MAC3C;IACF,CAAC,CAAC,OAAO8B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD9B,gBAAgB,CAAC,4BAA4B,CAAC;IAChD,CAAC,SAAS;MACRE,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACER,OAAA;IAAKsC,KAAK,EAAE;MAAEC,eAAe,EAAE,SAAS;MAAEC,OAAO,EAAE,MAAM;MAAEC,YAAY,EAAE,MAAM;MAAEC,SAAS,EAAE;IAA8B,CAAE;IAAAC,QAAA,gBAC1H3C,OAAA;MAAIsC,KAAK,EAAE;QAAEM,YAAY,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAF,QAAA,EAAC;IAAwB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjFjD,OAAA;MAAOkD,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,MAAM;MAACC,QAAQ,EAAE1C,qBAAsB;MAAC4B,KAAK,EAAE;QAAEM,YAAY,EAAE;MAAO;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrGjD,OAAA;MAAQqD,OAAO,EAAEtC,gBAAiB;MAACuC,QAAQ,EAAE/C,SAAU;MAAC+B,KAAK,EAAE;QAAEC,eAAe,EAAE,SAAS;QAAEM,KAAK,EAAE,MAAM;QAAEL,OAAO,EAAE,WAAW;QAAEC,YAAY,EAAE,KAAK;QAAEc,MAAM,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAU,CAAE;MAAAb,QAAA,EAAC;IAE5L;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACR1C,SAAS,iBAAIP,OAAA;MAAA2C,QAAA,EAAG;IAAa;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EACjC5C,aAAa,IAAI,CAACE,SAAS,iBAAIP,OAAA;MAAA2C,QAAA,EAAItC;IAAa;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV,CAAC;AAAC/C,EAAA,CAlEID,iBAAiB;AAAAwD,EAAA,GAAjBxD,iBAAiB;AAoEvB,eAAeA,iBAAiB;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}